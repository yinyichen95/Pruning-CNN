from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import sys
import tempfile

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf
import numpy as np
from numpy import linalg as LA

FLAGS = None

target_w = ['fc1/W_fc1','fc2/W_fc2']
prune_percent = {'fc1/W_fc1':20,'fc2/W_fc2':20}
dense_w = {}
def initialize_uninitialized_global_variables(sess):
    """                                                                                                                                             
    Only initializes the variables of a TensorFlow session that were not                                                                            
    already initialized.                                                                                                                            
    :param sess: the TensorFlow session                                                                                                             
    :return:                                                                                                                                        
    """
        # List all global variables                                                                                                                 
    global_vars = tf.global_variables()

    # Find initialized status for all variables                                                                                                     
    is_var_init = [tf.is_variable_initialized(var) for var in global_vars]
    is_initialized = sess.run(is_var_init)

    # List all variables that were not initialized previously                                                                                       
    not_initialized_vars = [var for (var, init) in
                            zip(global_vars, is_initialized) if not init]
    # Initialize all uninitialized variables found, if any                                                                                          
    if len(not_initialized_vars):
        sess.run(tf.variables_initializer(not_initialized_vars))

def prune_weight(weight_arr,weight_name):
    # instead of using all the weight values, including zeros to calculate percentitle, we use only nonzero                                                            
  percent = prune_percent[weight_name]
  non_zero_weight_arr = weight_arr[weight_arr!=0]
  pcen = np.percentile(abs(non_zero_weight_arr),percent)
  print ("percentile " + str(pcen))
  under_threshold = abs(weight_arr)< pcen
  before = len(non_zero_weight_arr)
  weight_arr[under_threshold] = 0
  non_zero_weight_arr = weight_arr[weight_arr!=0]
  after = len(non_zero_weight_arr)


  above_threshold = abs(weight_arr)>= pcen
  return [above_threshold,weight_arr]
def apply_prune(dense_w,sess):
    # returns dictionary of non_zero_values' indices                                                                                                                   
  dict_nzidx = {}
  for target_name in target_w:
    print ("at weight "+target_name)
    weight_arr = sess.run(dense_w[target_name])
    print ("before pruning #non zero parameters " + str(np.sum(weight_arr!=0)))
    before = np.sum(weight_arr!=0)
    mask,weight_arr_pruned = prune_weight(weight_arr,target_name)
    after = np.sum(weight_arr_pruned!=0)
    print ("pruned "+ str(before-after))
    
    print ("after prunning #non zero parameters " + str(np.sum(weight_arr_pruned!=0)))
    sess.run(dense_w[target_name].assign(weight_arr_pruned))
    dict_nzidx[target_name] = mask
  return dict_nzidx
def apply_prune_on_grads(grads_and_vars,dict_nzidx):

  for key, nzidx in dict_nzidx.items():    
    count = 0
    for grad, var in grads_and_vars:
      if var.name == key+":0":
        nzidx_obj = tf.cast(tf.constant(nzidx), tf.float32)
        grads_and_vars[count] = (tf.multiply(nzidx_obj, grad), var)
      count += 1
  return grads_and_vars  

def conv2d(x, W):
  """conv2d returns a 2d convolution layer with full stride."""
  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')


def max_pool_2x2(x):
  """max_pool_2x2 downsamples a feature map by 2X."""
  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                        strides=[1, 2, 2, 1], padding='SAME')


def weight_variable(shape,name=''):
  """weight_variable generates a weight variable of a given shape."""
  initial = tf.truncated_normal(shape, stddev=0.1)
  return tf.Variable(initial,name=name)


def bias_variable(shape):
  """bias_variable generates a bias variable of a given shape."""
  initial = tf.constant(0.1, shape=shape)
  return tf.Variable(initial)


def main(_):
  # Import data
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)


  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])

  # Define loss and optimizer
  y = tf.placeholder(tf.float32, [None, 10])

  # Build the graph for the deep net
  with tf.name_scope('reshape'):
    x_image = tf.reshape(x, [-1, 28, 28, 1])

  # First convolutional layer - maps one grayscale image to 32 feature maps.
  with tf.name_scope('conv1'):
    W_conv1 = weight_variable([5, 5, 1, 32],'W_conv1')
    b_conv1 = bias_variable([32])
    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
    dense_w['conv1/W_conv1'] = W_conv1
  # Pooling layer - downsamples by 2X.
  with tf.name_scope('pool1'):
    h_pool1 = max_pool_2x2(h_conv1)

  # Second convolutional layer -- maps 32 feature maps to 64.
  with tf.name_scope('conv2'):
    W_conv2 = weight_variable([5, 5, 32, 64],'W_conv2')
    dense_w['conv2/W_conv2'] = W_conv2
    b_conv2 = bias_variable([64])
    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)

  # Second pooling layer.
  with tf.name_scope('pool2'):
    h_pool2 = max_pool_2x2(h_conv2)

  # Fully connected layer 1 -- after 2 round of downsampling, our 28x28 image
  # is down to 7x7x64 feature maps -- maps this to 1024 features.
  with tf.name_scope('fc1'):
    W_fc1 = weight_variable([7 * 7 * 64, 1024],'W_fc1')
    b_fc1 = bias_variable([1024])
    dense_w['fc1/W_fc1'] = W_fc1
    h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

  # Dropout - controls the complexity of the model, prevents co-adaptation of
  # features.
  with tf.name_scope('dropout'):
    keep_prob = tf.placeholder(tf.float32)
    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

  # Map the 1024 features to 10 classes, one for each digit
  with tf.name_scope('fc2'):
    W_fc2 = weight_variable([1024, 10],'W_fc2')
    b_fc2 = bias_variable([10])
    dense_w['fc2/W_fc2'] = W_fc2
    y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2

  with tf.name_scope('loss'):
    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y,
                                                            logits=y_conv)
  cross_entropy = tf.reduce_mean(cross_entropy)

  with tf.name_scope('adam_optimizer'):
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

    
  with tf.name_scope('accuracy'):
    correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y, 1))
    correct_prediction = tf.cast(correct_prediction, tf.float32)
  accuracy = tf.reduce_mean(correct_prediction)


  iterations = 10
  with tf.Session() as sess:
      sess.run(tf.global_variables_initializer())
      for i in range(1000):
            batch = mnist.train.next_batch(100)
            if i%100 == 0:
                train_accuracy = accuracy.eval(feed_dict={
                        x:batch[0], y: batch[1],keep_prob: 1.0})
                print("step %d, training accuracy %f"%(i, train_accuracy))
            train_step.run(feed_dict={x: batch[0], y: batch[1],keep_prob: 1.0})

      for i in range(iterations):
          dict_nzidx = apply_prune(dense_w,sess)
          cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y,
                                                            logits=y_conv)
          cross_entropy = tf.reduce_mean(cross_entropy)
          trainer = tf.train.AdamOptimizer(1e-4)
          grads_and_vars = trainer.compute_gradients(cross_entropy)
          grads_and_vars = apply_prune_on_grads(grads_and_vars,dict_nzidx)
          retrain_step = trainer.apply_gradients(grads_and_vars)

          initialize_uninitialized_global_variables(sess)

          for i in range(20):  # retrain
              batch = mnist.train.next_batch(50)
              if i % 100 == 0:
                  train_accuracy = accuracy.eval(feed_dict={x: batch[0], y: batch[1], keep_prob: 1.0})
                  print("step %d, training accuracy %f" % (i, train_accuracy))
             # retrain_step.run(feed_dict={x: batch[0], y: batch[1], keep_prob: 1.0})
          initialize_uninitialized_global_variables(sess)


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str,
                      default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
